# 1 –ó–∞–¥–∞–Ω–∏–µ

# from aiogram import Bot,executor,Dispatcher,types
# from config import TOKEN_API

# bot=Bot(TOKEN_API)
# dp=Dispatcher(bot)


# @dp.message_handler(commands=['give'])
# async def stikert_look(message:types.Message):
#     await message.reply(text='—Å–º–æ—Ç—Ä–∏ –∫–∞–∫–æ–π –∫–æ—Ç–∏–∫'+'‚ù§Ô∏è' )
#     await bot.send_sticker(message.from_user.id, sticker='CAACAgIAAxkBAAENEoZnKQimbQ3hdsKlsdKTgvuXVJ2yFQACeBQAAokOQUvMGMzwzDHFyDYE')
#     await message.delete()



# if __name__=='__main__':
#     executor.start_polling(dp)



# # 2 –ó–∞–¥–∞–Ω–∏–µ

# from aiogram import Bot,executor,Dispatcher,types
# from config import TOKEN_API

# bot=Bot(TOKEN_API)
# dp=Dispatcher(bot)


# @dp.message_handler()
# async def stikert_look(message:types.Message):
#     if message.text=='‚ù§Ô∏è':
#         await message.answer(text="üñ§")
#         await message.delete()    



# if __name__=='__main__':
#     executor.start_polling(dp)



# 3 –ó–∞–¥–∞–Ω–∏–µ

# from aiogram import Bot,executor,Dispatcher,types
# from config import TOKEN_API

# bot=Bot(TOKEN_API)
# dp=Dispatcher(bot)


# @dp.message_handler()
# async def count(message:types.Message):
#         await message.reply(text=str(message.text.count('‚òëÔ∏è')))
        
 



# if __name__=='__main__':
#     executor.start_polling(dp)




# 4 –ó–∞–¥–∞–Ω–∏–µ



# from aiogram import Bot, executor, Dispatcher, types
# from config import TOKEN_API

# bot = Bot(TOKEN_API)
# dp = Dispatcher(bot)
# async def on_startup(_):
#     print('–Ø –∑–∞–ø—É—Å—Ç–∏–ª—Å—è')


# # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—á–µ—Ç—á–∏–∫–∞ –≤—ã–∑–æ–≤–æ–≤ –∫–æ–º–∞–Ω–¥—ã /Count
# count_ann = 0


# @dp.message_handler(commands=['help'])
# async def help_command(message: types.Message):
#     await message.reply("–°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥:'/help - —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥<br>''/START - –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º<br>''/Count - –ø–æ–¥—Å—á–µ—Ç –≤—ã–∑–æ–≤–æ–≤ –∫–æ–º–∞–Ω–¥—ã<br>''/description - —ç—Ç–æ—Ç –±–∞–≥ –ø–æ–º–æ–∂–µ—Ç –≤–∞–º –Ω–∞–π—Ç–∏ –∫–≤–∞—Ä—Ç–∏—Ä—É –∏–ª–∏ –¥–æ–º –ª–∏–±–æ –º–µ—Å—Ç–æ –∂–∏—Ç–µ–ª—å—Å—Ç–≤–∞ –∫–∞–∫ –≤–∞–º —É–≥–æ–¥–Ω–æ<br>''/stiker - –º–æ–∂–µ—Ç –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–∞–º –º–∏–ª–æ–≥–æ –∫–æ—Ç—ë–Ω–∫–∞'",parse_mode='HTML')

# @dp.message_handler(commands=['start'])
# async def start_command(message: types.Message):
#     await message.answer(text='–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à Telegram –±–æ—Ç!')
#     await message.delete()

# @dp.message_handler(commands=['Count'])
# async def count_command(message: types.Message):
#     global count_ann
#     count_ann += 1
#     await message.answer(f'Count: {count_ann}')

# @dp.message_handler(commands=['stiker'])
# async def sticker_command(message: types.Message):
#     await bot.send_sticker(message.from_user.id, sticker='CAACAgIAAxkBAAENEoZnKQimbQ3hdsKlsdKTgvuXVJ2yFQACeBQAAokOQUvMGMzwzDHFyDYE')
#     await message.delete()

# @dp.message_handler(commands=['description'])
# async def echo(message:types.Message):
#     await message.reply('—ç—Ç–æ—Ç –±–∞–≥ –ø–æ–º–æ–∂–µ—Ç –≤–∞–º –Ω–∞–π—Ç–∏ –∫–≤–∞—Ä—Ç–∏—Ä—É –∏–ª–∏ –¥–æ–º –ª–∏–±–æ –º–µ—Å—Ç–æ –∂–∏—Ç–µ–ª—å—Å—Ç–≤–∞ –∫–∞–∫ –≤–∞–º —É–≥–æ–¥–Ω–æ')
#     await message.delete()


# if __name__ == '__main__':
#     executor.start_polling(dp,on_startup=on_startup)



# 5 –ó–∞–¥–∞–Ω–∏–µ



from aiogram import Bot, executor, Dispatcher, types
from config import TOKEN_API

bot = Bot(TOKEN_API)
dp = Dispatcher(bot)
async def on_startup(_):
    print('–Ø –∑–∞–ø—É—Å—Ç–∏–ª—Å—è')


@dp.message_handler(content_types=['sticker'])
async def stiker_id(message: types.Message):
    await message.reply(message.sticker.file_id)


if __name__ == '__main__':
    executor.start_polling(dp,on_startup=on_startup)
